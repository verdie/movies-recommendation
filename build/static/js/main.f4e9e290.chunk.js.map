{"version":3,"sources":["components/GenresList.js","actions.js","components/GenresItem.js","components/helpers/recomFunc.js","components/Recommendation.js","App.js","serviceWorker.js","reducers/index.js","reducers/movies.js","store.js","index.js"],"names":["GenresList","state","gens","request","then","response","setState","body","genres","console","log","this","className","length","map","item","key","id","to","name","React","Component","SELECT_MOVIES","GenresItem","movies","selectedMovies","active","onMovieClick","event","movie","preventDefault","some","concat","onRecommendationClick","props","selectMovies","page","Math","floor","random","match","params","genreId","results","isActive","find","sel","onClick","title","slice","src","poster_path","alt","mapDispatchToProps","payload","type","connect","recomFunc","values","counts","flat","forEach","times","Object","sort","a","b","Recommendation","index","current","Promise","all","res","movieRec","overview","App","path","exact","component","Boolean","window","location","hostname","combineReducers","action","devTools","__REDUX_DEVTOOLS_EXTENSION__","f","enhancer","compose","applyMiddleware","ReduxThunk","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4e9e290.chunk.js","sourcesContent":["import React from 'react';\nimport * as request from 'superagent'\nimport {Link} from 'react-router-dom'\nimport './GenresList.css'\n\nclass GenresList extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      gens: []\n    };\n  }\n  componentDidMount() {\n    request\n      .get('https://api.themoviedb.org/3/genre/movie/list?api_key=9f331ae5aeb7c6a0d55d497451' +\n        'cb6fca&language=en-US')\n      .then(response => {\n        this.setState({gens: response.body.genres})\n      })\n  }\n  render() {\n    console.log('STATE', this.state)\n    return (\n      <div className='wrap'>\n        <h2>Please select category that you like</h2>\n        <div className='category-wrapper'>\n          {this.state.gens.length\n            ? this.state.gens.map(item => {\n                return (\n                  <Link key={item.id} to={`/genre/${item.id}`}>\n                    <p className='genre-p'>{item.name}</p>\n                  </Link>\n                );\n              })\n            : null\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GenresList;\n","export const SELECT_MOVIES ='SELECT_MOVIES'\nexport function selectMovies (payload) {\n  return {\n    type: SELECT_MOVIES,\n    payload\n  }\n}","import React from 'react'\nimport * as request from 'superagent'\nimport {selectMovies} from '../actions'\nimport {connect} from 'react-redux'\nimport {Link} from 'react-router-dom'\nimport './GenresItem.css'\n\nclass GenresItem extends React.Component {\n  state = {\n    movies: [],\n    selectedMovies: [],\n    active: false\n  }\n  componentDidMount() {\n    const page = Math.floor(Math.random() * 10)\n    request\n      .get(`https://api.themoviedb.org/3/discover/movie?api_key=9f331ae5aeb7c6a0d55d497451cb6fca&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&with_genres=${this.props.match.params.genreId}&page=${page}`)\n      .then(response => this.setState({movies: response.body.results}))\n  }\n  onMovieClick = (event, movie) => {\n    event.preventDefault();\n    if (!this.state.selectedMovies.some(item => item.id === movie.id)) {\n      this.setState({\n        selectedMovies: this\n          .state\n          .selectedMovies\n          .concat(movie),\n        active: true\n      })\n    }\n  }\n\n  onRecommendationClick = (event) => {\n    this\n      .props\n      .selectMovies(this.state.selectedMovies)\n  }\n  render() {\n\n    return (\n      <div className='wrap'>\n        <h2>Please select movies that you like</h2>\n        <div className='movies-wrapper'>\n\n          {this.state.movies.length\n            ? this\n              .state\n              .movies\n              .map(item => {\n                const isActive = this\n                  .state\n                  .selectedMovies\n                  .find(sel => item.id === sel.id)\n                return <div\n                  className={isActive\n                  ? 'active'\n                  : 'movie'}\n                  key={item.id}\n                  onClick={(event) => {\n                  this.onMovieClick(event, item)\n                }}>\n                  <h4>{item\n                      .title\n                      .slice(0, 50)}</h4>\n                  <div className='movie-container'>\n                    <img src={`http://image.tmdb.org/t/p/w185/${item.poster_path}`} alt='poster'/>\n                  </div>\n                </div>\n              })\n            : null}\n\n        </div>\n        <div className='buttons'>\n          <Link\n            to='/recommendation'\n            className='show'\n            onClick={this.onRecommendationClick}>\n            Show Recommendation\n          </Link>\n          <Link className='link' to='/'>\n            <p className='link-p'>Go to main page</p>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {movies: state.movies}\n}\n\nconst mapDispatchToProps = {\n  selectMovies\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GenresItem)","export default function recomFunc(values) {\n  var counts = {};\n  values\n    .flat()\n    .forEach((movie) => {\n      if (!counts[movie.id]) \n        counts[movie.id] = {\n          times: 0\n        };\n      counts[movie.id].times = counts[movie.id].times + 1;\n      counts[movie.id].movie = movie;\n    });\n\n  return Object\n    .values(counts)\n    .sort((a, b) => b.times - a.times);\n}\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport * as request from 'superagent';\nimport {Link} from 'react-router-dom'\nimport recomFunc from './helpers/recomFunc.js';\nimport './Recommendation.css'\n\n\nexport class Recommendation extends React.Component {\n  state = {\n    index: 0,\n    // Only for testing...\n    current: this.props.current ? [this.props.current] : []\n  }\n  componentDidMount() {\n    const movies = this.props.movies;\n\n    Promise.all(movies.map(item => {\n      return request\n        .get(`https://api.themoviedb.org/3/movie/${item.id}/recommendations?api_key=9f331ae5aeb7c6a0d55d497451cb6fca&language=en-US&page=1`)\n        .then(res => {\n          return res.body.results;\n        })\n    })).then(values => {\n      this.setState({current: recomFunc(values)})\n    })\n  }\n\n  onClick = (event) => {\n    event.preventDefault();\n    this.setState({\n      index: this.state.index + 1\n    })\n  }\n  render() {\n    const movieRec = this.state.current.length\n      ? this.state.current[this.state.index].movie\n      : null;\n    console.log('Movie:', movieRec)\n    return (\n      <div className='rec-wrapper'>\n        <h2>We recommend you to watch</h2>\n        {movieRec\n          ? <div className='rec-movie'>\n              <h4>{movieRec\n                  .title\n                  .slice(0, 50)}</h4>\n              <div className='rec-movie-container'>\n                <img\n                  src={`http://image.tmdb.org/t/p/w185/${movieRec.poster_path}`}\n                  alt='poster'/>\n                <p>{movieRec\n                    .overview\n                    .slice(0, 410)}</p>\n              </div>\n            </div>\n          : null\n}\n        <div className='buttons'>\n          <button className='rec-button' onClick={this.onClick}>Next</button>\n          <Link className='link' to='/'>\n            <p className='link-p'>Go to main page</p>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {movies: state.movies}\n}\n\nexport default connect(mapStateToProps, null)(Recommendation)","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport GenresList from './components/GenresList';\nimport GenresItem from './components/GenresItem'\nimport Recommendation from './components/Recommendation'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <main>\n        <Route path='/' exact component={GenresList}/>\n        <Route path='/genre/:genreId' exact component={GenresItem}/>\n        <Route path='/recommendation' exact component={Recommendation}/>\n      </main>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\nimport movies from './movies'\n\nexport default combineReducers({\n  movies\n})","import {SELECT_MOVIES} from '../actions'\n\nexport default function (state = [], action = {}) {\n  switch (action.type) {\n    case SELECT_MOVIES:\n      return action.payload\n    default:\n      return state\n  }\n}","import { createStore, applyMiddleware, compose } from 'redux'\nimport reducer from './reducers'\nimport ReduxThunk from 'redux-thunk'\n\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\n\nconst enhancer = compose(\n  applyMiddleware(ReduxThunk),\n  devTools\n)\n\nconst store = createStore(reducer, enhancer)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <BrowserRouter>\n  <Provider store={store}>\n    <App/>\n  </Provider>\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls. Learn\n// more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}